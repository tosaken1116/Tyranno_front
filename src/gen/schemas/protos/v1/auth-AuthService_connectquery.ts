// @generated by protoc-gen-connect-query v0.4.1 with parameter "target=ts,import_extension=none"
// @generated from file schemas/protos/v1/auth.proto (package schemas.protos.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { GenerateTotpKeyRequest, GenerateTotpKeyResponse, SignInResponse, SignOutResponse, ValidateTotpRequest, ValidateTotpResponse, VerifyTotpRequest, VerifyTotpResponse } from "./auth_pb";

export const typeName = "schemas.protos.v1.AuthService";

/**
 * @generated from rpc schemas.protos.v1.AuthService.SignIn
 */
export const signIn = createQueryService({
  service: {
    methods: {
      signIn: {
        name: "SignIn",
        kind: MethodKind.Unary,
        I: Empty,
        O: SignInResponse,
      },
    },
    typeName: "schemas.protos.v1.AuthService",
  },
}).signIn;

/**
 * @generated from rpc schemas.protos.v1.AuthService.SignOut
 */
export const signOut = createQueryService({
  service: {
    methods: {
      signOut: {
        name: "SignOut",
        kind: MethodKind.Unary,
        I: Empty,
        O: SignOutResponse,
      },
    },
    typeName: "schemas.protos.v1.AuthService",
  },
}).signOut;

/**
 * @generated from rpc schemas.protos.v1.AuthService.GenerateTotpKey
 */
export const generateTotpKey = createQueryService({
  service: {
    methods: {
      generateTotpKey: {
        name: "GenerateTotpKey",
        kind: MethodKind.Unary,
        I: GenerateTotpKeyRequest,
        O: GenerateTotpKeyResponse,
      },
    },
    typeName: "schemas.protos.v1.AuthService",
  },
}).generateTotpKey;

/**
 * @generated from rpc schemas.protos.v1.AuthService.VerifyTotp
 */
export const verifyTotp = createQueryService({
  service: {
    methods: {
      verifyTotp: {
        name: "VerifyTotp",
        kind: MethodKind.Unary,
        I: VerifyTotpRequest,
        O: VerifyTotpResponse,
      },
    },
    typeName: "schemas.protos.v1.AuthService",
  },
}).verifyTotp;

/**
 * @generated from rpc schemas.protos.v1.AuthService.ValidateTotp
 */
export const validateTotp = createQueryService({
  service: {
    methods: {
      validateTotp: {
        name: "ValidateTotp",
        kind: MethodKind.Unary,
        I: ValidateTotpRequest,
        O: ValidateTotpResponse,
      },
    },
    typeName: "schemas.protos.v1.AuthService",
  },
}).validateTotp;
