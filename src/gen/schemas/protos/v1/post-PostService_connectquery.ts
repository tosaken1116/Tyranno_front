// @generated by protoc-gen-connect-query v0.4.1 with parameter "target=ts,import_extension=none"
// @generated from file schemas/protos/v1/post.proto (package schemas.protos.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateFavoriteRequest, CreateFavoriteResponse, CreatePostRequest, CreatePostResponse, DeleteFavoriteRequest, DeleteFavoriteResponse, DeletePostRequest, DeletePostResponse, GetPostRequest, GetPostResponse, GetPostsRequest, GetPostsResponse, GetRepliesRequest, GetRepliesResponse } from "./post_pb";
import { GetUserRequest, GetUsersResponse } from "./user_pb";

export const typeName = "schemas.protos.v1.PostService";

/**
 * @generated from rpc schemas.protos.v1.PostService.CreatePost
 */
export const createPost = createQueryService({
  service: {
    methods: {
      createPost: {
        name: "CreatePost",
        kind: MethodKind.Unary,
        I: CreatePostRequest,
        O: CreatePostResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).createPost;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetPost
 */
export const getPost = createQueryService({
  service: {
    methods: {
      getPost: {
        name: "GetPost",
        kind: MethodKind.Unary,
        I: GetPostRequest,
        O: GetPostResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getPost;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetPosts
 */
export const getPosts = createQueryService({
  service: {
    methods: {
      getPosts: {
        name: "GetPosts",
        kind: MethodKind.Unary,
        I: GetPostsRequest,
        O: GetPostsResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getPosts;

/**
 * @generated from rpc schemas.protos.v1.PostService.DeletePost
 */
export const deletePost = createQueryService({
  service: {
    methods: {
      deletePost: {
        name: "DeletePost",
        kind: MethodKind.Unary,
        I: DeletePostRequest,
        O: DeletePostResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).deletePost;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetReplies
 */
export const getReplies = createQueryService({
  service: {
    methods: {
      getReplies: {
        name: "GetReplies",
        kind: MethodKind.Unary,
        I: GetRepliesRequest,
        O: GetRepliesResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getReplies;

/**
 * @generated from rpc schemas.protos.v1.PostService.CreateFavorite
 */
export const createFavorite = createQueryService({
  service: {
    methods: {
      createFavorite: {
        name: "CreateFavorite",
        kind: MethodKind.Unary,
        I: CreateFavoriteRequest,
        O: CreateFavoriteResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).createFavorite;

/**
 * @generated from rpc schemas.protos.v1.PostService.DeleteFavorite
 */
export const deleteFavorite = createQueryService({
  service: {
    methods: {
      deleteFavorite: {
        name: "DeleteFavorite",
        kind: MethodKind.Unary,
        I: DeleteFavoriteRequest,
        O: DeleteFavoriteResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).deleteFavorite;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetMyFavoritePosts
 */
export const getMyFavoritePosts = createQueryService({
  service: {
    methods: {
      getMyFavoritePosts: {
        name: "GetMyFavoritePosts",
        kind: MethodKind.Unary,
        I: Empty,
        O: GetPostsResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getMyFavoritePosts;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetOthersFavoritePosts
 */
export const getOthersFavoritePosts = createQueryService({
  service: {
    methods: {
      getOthersFavoritePosts: {
        name: "GetOthersFavoritePosts",
        kind: MethodKind.Unary,
        I: GetUserRequest,
        O: GetPostsResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getOthersFavoritePosts;

/**
 * @generated from rpc schemas.protos.v1.PostService.GetUsersFavoritedPost
 */
export const getUsersFavoritedPost = createQueryService({
  service: {
    methods: {
      getUsersFavoritedPost: {
        name: "GetUsersFavoritedPost",
        kind: MethodKind.Unary,
        I: GetPostRequest,
        O: GetUsersResponse,
      },
    },
    typeName: "schemas.protos.v1.PostService",
  },
}).getUsersFavoritedPost;
