// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file schemas/protos/v1/auth.proto (package schemas.protos.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message schemas.protos.v1.SignInResponse
 */
export class SignInResponse extends Message<SignInResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<SignInResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.SignInResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignInResponse {
    return new SignInResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignInResponse {
    return new SignInResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignInResponse {
    return new SignInResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignInResponse | PlainMessage<SignInResponse> | undefined, b: SignInResponse | PlainMessage<SignInResponse> | undefined): boolean {
    return proto3.util.equals(SignInResponse, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.SignOutResponse
 */
export class SignOutResponse extends Message<SignOutResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  constructor(data?: PartialMessage<SignOutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.SignOutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignOutResponse {
    return new SignOutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignOutResponse {
    return new SignOutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignOutResponse {
    return new SignOutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignOutResponse | PlainMessage<SignOutResponse> | undefined, b: SignOutResponse | PlainMessage<SignOutResponse> | undefined): boolean {
    return proto3.util.equals(SignOutResponse, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.GenerateTotpKeyRequest
 */
export class GenerateTotpKeyRequest extends Message<GenerateTotpKeyRequest> {
  /**
   * @generated from field: string firebase_id = 1;
   */
  firebaseId = "";

  constructor(data?: PartialMessage<GenerateTotpKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.GenerateTotpKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "firebase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTotpKeyRequest {
    return new GenerateTotpKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTotpKeyRequest {
    return new GenerateTotpKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTotpKeyRequest {
    return new GenerateTotpKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTotpKeyRequest | PlainMessage<GenerateTotpKeyRequest> | undefined, b: GenerateTotpKeyRequest | PlainMessage<GenerateTotpKeyRequest> | undefined): boolean {
    return proto3.util.equals(GenerateTotpKeyRequest, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.GenerateTotpKeyResponse
 */
export class GenerateTotpKeyResponse extends Message<GenerateTotpKeyResponse> {
  /**
   * @generated from field: string totp_key = 1;
   */
  totpKey = "";

  /**
   * @generated from field: string totp_url = 2;
   */
  totpUrl = "";

  constructor(data?: PartialMessage<GenerateTotpKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.GenerateTotpKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "totp_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totp_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTotpKeyResponse {
    return new GenerateTotpKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTotpKeyResponse {
    return new GenerateTotpKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTotpKeyResponse {
    return new GenerateTotpKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTotpKeyResponse | PlainMessage<GenerateTotpKeyResponse> | undefined, b: GenerateTotpKeyResponse | PlainMessage<GenerateTotpKeyResponse> | undefined): boolean {
    return proto3.util.equals(GenerateTotpKeyResponse, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.VerifyTotpRequest
 */
export class VerifyTotpRequest extends Message<VerifyTotpRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string firebase_id = 2;
   */
  firebaseId = "";

  constructor(data?: PartialMessage<VerifyTotpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.VerifyTotpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firebase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTotpRequest {
    return new VerifyTotpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTotpRequest {
    return new VerifyTotpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTotpRequest {
    return new VerifyTotpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTotpRequest | PlainMessage<VerifyTotpRequest> | undefined, b: VerifyTotpRequest | PlainMessage<VerifyTotpRequest> | undefined): boolean {
    return proto3.util.equals(VerifyTotpRequest, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.VerifyTotpResponse
 */
export class VerifyTotpResponse extends Message<VerifyTotpResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  constructor(data?: PartialMessage<VerifyTotpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.VerifyTotpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTotpResponse {
    return new VerifyTotpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTotpResponse {
    return new VerifyTotpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTotpResponse {
    return new VerifyTotpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTotpResponse | PlainMessage<VerifyTotpResponse> | undefined, b: VerifyTotpResponse | PlainMessage<VerifyTotpResponse> | undefined): boolean {
    return proto3.util.equals(VerifyTotpResponse, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.ValidateTotpRequest
 */
export class ValidateTotpRequest extends Message<ValidateTotpRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string firebase_id = 2;
   */
  firebaseId = "";

  constructor(data?: PartialMessage<ValidateTotpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.ValidateTotpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firebase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateTotpRequest {
    return new ValidateTotpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateTotpRequest {
    return new ValidateTotpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateTotpRequest {
    return new ValidateTotpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateTotpRequest | PlainMessage<ValidateTotpRequest> | undefined, b: ValidateTotpRequest | PlainMessage<ValidateTotpRequest> | undefined): boolean {
    return proto3.util.equals(ValidateTotpRequest, a, b);
  }
}

/**
 * @generated from message schemas.protos.v1.ValidateTotpResponse
 */
export class ValidateTotpResponse extends Message<ValidateTotpResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  constructor(data?: PartialMessage<ValidateTotpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schemas.protos.v1.ValidateTotpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateTotpResponse {
    return new ValidateTotpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateTotpResponse {
    return new ValidateTotpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateTotpResponse {
    return new ValidateTotpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateTotpResponse | PlainMessage<ValidateTotpResponse> | undefined, b: ValidateTotpResponse | PlainMessage<ValidateTotpResponse> | undefined): boolean {
    return proto3.util.equals(ValidateTotpResponse, a, b);
  }
}

